name: Task Management System CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: task_management_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create test environment file
        run: |
          cat > .env.test << EOL
          NODE_ENV=test
          PORT=3000
          API_PREFIX=api
          APP_URL=http://localhost:3000

          DB_HOST=localhost
          DB_PORT=5432
          DB_USERNAME=postgres
          DB_PASSWORD=postgres
          DB_DATABASE=task_management_test
          DB_SYNCHRONIZE=true

          JWT_SECRET=test_jwt_secret_key
          JWT_EXPIRATION=3600s
          JWT_REFRESH_SECRET=test_jwt_refresh_secret
          JWT_REFRESH_EXPIRATION=604800s

          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_TTL=3600s

          THROTTLE_TTL=60
          THROTTLE_LIMIT=10
          EOL
      
      - name: Run linting
        run: npm run lint
      
      - name: Run unit tests
        run: npm run test
      
      - name: Run e2e tests
        run: npm run test:e2e
      
      - name: Generate test coverage
        run: npm run test:cov
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      # Example deployment to a cloud provider
      # This is a placeholder - replace with your actual deployment steps
      - name: Deploy to production
        run: |
          echo "Deploying application to production environment"
          # Add your deployment commands here
          # Examples:
          # - Deploy to AWS Elastic Beanstalk
          # - Deploy to Heroku
          # - Deploy to DigitalOcean
          # - Deploy to Azure App Service
          echo "Deployment completed successfully"
